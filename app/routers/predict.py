from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, Field
import pandas as pd
import joblib
from pathlib import Path


router = APIRouter(prefix="/predict", tags=["Prediction"], include_in_schema=True)


# üîπ Modelo de entrada ‚Äî define os par√¢metros esperados
class PredictionInput(BaseModel):
    koi_duration: float = Field(..., description="Dura√ß√£o do tr√¢nsito")
    koi_ror: float = Field(..., description="Raz√£o raio planeta/estrela")
    koi_srho: float = Field(..., description="Densidade estelar")
    koi_dicco_msky: float = Field(..., description="Correla√ß√£o de deslocamento medido no c√©u")
    koi_dikco_msky: float = Field(..., description="Correla√ß√£o de deslocamento intr√≠nseco no c√©u")


@router.post("")
def predict(input_data: PredictionInput):
    """
    Recebe par√¢metros num√©ricos no corpo da requisi√ß√£o e retorna a probabilidade de classifica√ß√£o.
    """

    try:

        model_path = Path(__file__).resolve().parent.parent / "models" / "final_model.joblib"
        # üî∏ Carrega o modelo
        model = joblib.load(model_path)
        


        # üî∏ Cria um DataFrame com os dados recebidos
        obs = pd.DataFrame([{
            "koi_duration": input_data.koi_duration,
            "koi_ror": input_data.koi_ror,
            "koi_srho": input_data.koi_srho,
            "koi_dicco_msky": input_data.koi_dicco_msky,
            "koi_dikco_msky": input_data.koi_dikco_msky
        }])

        # üî∏ Faz a previs√£o (probabilidade)
        result = model.predict_proba(obs)[:, 1]
        print(result)

        return {"prediction_probability": float(result[0])}

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
